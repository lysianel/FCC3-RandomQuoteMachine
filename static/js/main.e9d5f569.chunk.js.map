{"version":3,"sources":["shared/quotes.js","components/Quote.js","App.js","serviceWorker.js","index.js"],"names":["QUOTES","id","quote","author","quoteNumber","length","Quote","props","state","loadQuote","bind","this","idNew","Math","floor","random","setState","key","className","href","title","target","rel","icon","faTwitterSquare","type","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"ySAAaA,EAAS,CACrB,CACCC,GAAK,EACLC,MAAO,+CACPC,OAAO,eAER,CACCF,GAAK,EACLC,MAAM,iCACNC,OAAO,eAER,CACCF,GAAK,EACLC,MAAM,kGACNC,OAAO,mBAGR,CACCF,GAAK,EACLC,MAAM,8GACNC,OAAO,qBAGR,CACCF,GAAK,EACLC,MAAM,sDACNC,OAAO,yBAGR,CACCF,GAAK,EACLC,MAAM,2JACNC,OAAO,qBAGR,CACCF,GAAK,EACLC,MAAM,8DACNC,OAAO,YAER,CACCF,GAAK,EACLC,MAAM,mDACNC,OAAO,kBAER,CACCF,GAAK,EACLC,MAAM,8EACNC,OAAO,gBAER,CACCF,GAAK,EACLC,MAAM,0GACNC,OAAO,iB,eChDHC,EAAcJ,EAAOK,OAgEZC,E,kDA5Dd,WAAYC,GAAO,IAAD,8BAEjB,cAAMA,IAEDC,MAAM,CACVP,GAAG,GACHE,OAAO,GACPD,MAAM,IAGP,EAAKO,UAAU,EAAKA,UAAUC,KAAf,gBAVE,E,gEAcjBC,KAAKF,c,kCAML,IAAIG,EAAM,GAGV,GACCA,EAAQC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMV,UACtCQ,IAAQD,KAAKH,MAAMP,IAG5BU,KAAKK,SAAU,CACdf,GAAGW,EACHT,OAAOH,EAAOY,GAAOT,OACrBD,MAAMF,EAAOY,GAAOV,U,+BAQrB,OACC,yBAAKD,GAAG,aACP,yBAAKgB,IAAI,oBACR,uBAAGhB,GAAG,QAAN,UACUU,KAAKH,MAAMN,MADrB,WAGA,uBAAGD,GAAG,UACJU,KAAKH,MAAML,SAGd,yBAAKe,UAAU,gBACd,uBAAGC,KAAK,mCAAmCC,MAAM,QAAQC,OAAO,SAASC,IAAI,WAAYrB,GAAG,eAC3F,kBAAC,IAAD,CAAiBsB,KAAMC,OAExB,4BAAQC,KAAK,SAASL,MAAM,gBAAgBnB,GAAG,YAAYyB,QAASf,KAAKF,WAAzE,mB,GAvDekB,aCMLC,MARf,WACE,OACE,yBAAKV,UAAU,OACX,kBAAC,EAAD,QCIYW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e9d5f569.chunk.js","sourcesContent":["export const QUOTES = [\r\n\t{\r\n\t\tid : 0,\r\n\t\tquote: \"Be yourself; everyone else is already taken.\",\r\n\t\tauthor:\"Oscar Wilde\"\r\n\t},\r\n\t{\r\n\t\tid : 1,\r\n\t\tquote:\"So many books, so little time.\",\r\n\t\tauthor:\"Frank Zappa\"\r\n\t},\r\n\t{\r\n\t\tid : 2,\r\n\t\tquote:\"Two things are infinite: the universe and human stupidity; and I'm not sure about the universe.\",\r\n\t\tauthor:\"Albert Einstein\"\r\n\t},\r\n\r\n\t{\r\n\t\tid : 3,\r\n\t\tquote:\"Be who you are and say what you feel, because those who mind don't matter, and those who matter don't mind.\",\r\n\t\tauthor:\"Bernard M. Baruch\"\r\n\t},\r\n\r\n\t{\r\n\t\tid : 4,\r\n\t\tquote:\"A room without books is like a body without a soul.\",\r\n\t\tauthor:\"Marcus Tullius Cicero\"\r\n\t},\r\n\r\n\t{\r\n\t\tid : 5,\r\n\t\tquote:\"You've gotta dance like there's nobody watching, Love like you'll never be hurt, Sing like there's nobody listening, And live like it's heaven on earth.\",\r\n\t\tauthor:\"William W. Purkey\"\r\n\t},\r\n\r\n\t{\r\n\t\tid : 6,\r\n\t\tquote:\"You only live once, but if you do it right, once is enough.\",\r\n\t\tauthor:\"Mae West\"\r\n\t},\r\n\t{\r\n\t\tid : 7,\r\n\t\tquote:\"Be the change that you wish to see in the world.\",\r\n\t\tauthor:\"Mahatma Gandhi\"\r\n\t},\r\n\t{\r\n\t\tid : 8,\r\n\t\tquote:\"In three words I can sum up everything I've learned about life: it goes on.\",\r\n\t\tauthor:\"Robert Frost\"\r\n\t},\r\n\t{\r\n\t\tid : 9,\r\n\t\tquote:\"If you want to know what a man's like, take a good look at how he treats his inferiors, not his equals.\",\r\n\t\tauthor:\"J.K. Rowling\"\r\n\t}\r\n];","import React, { Component } from 'react';\r\nimport { QUOTES } from '../shared/quotes';\r\nimport { faTwitterSquare } from \"@fortawesome/free-brands-svg-icons\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nconst quoteNumber = QUOTES.length;\r\n\r\nclass Quote extends Component{\r\n\r\n\tconstructor(props){\r\n\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state={\r\n\t\t\tid:'', \r\n\t\t\tauthor:'',\r\n\t\t\tquote:'',\r\n\t\t};\r\n\r\n\t\tthis.loadQuote=this.loadQuote.bind(this);\r\n\t};\r\n\t\r\n\tcomponentDidMount(){\r\n\t\tthis.loadQuote();\r\n\t}\r\n\r\n\r\n\tloadQuote(){\r\n\t\t\r\n\t\tlet idNew='';\r\n\t\t\r\n\t\t//fetch a new id\r\n\t\tdo {\r\n\t\t\tidNew = Math.floor(Math.random() * Math.floor(quoteNumber));\r\n\t\t} while (idNew===this.state.id);\r\n\r\n\t\t//update the state with new quote\r\n\t\tthis.setState ({\r\n\t\t\tid:idNew,\r\n\t\t\tauthor:QUOTES[idNew].author,\r\n\t\t\tquote:QUOTES[idNew].quote\r\n\t\t});\r\n\t\t\r\n\t}\r\n\r\n  \r\n\trender(){\r\n\r\n\t\treturn (\r\n\t\t\t<div id=\"quote-box\">\r\n\t\t\t\t<div key=\"transition-group\">\r\n\t\t\t\t\t<p id=\"text\">\r\n\t\t\t\t\t\t&ldquo; {this.state.quote} &rdquo;\r\n\t\t\t\t\t</p>\r\n\t\t\t\t\t<p id=\"author\">\r\n\t\t\t\t\t\t{this.state.author} \r\n\t\t\t\t\t</p>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"button-group\">\r\n\t\t\t\t\t<a href=\"https://twitter.com/intent/tweet\" title=\"tweet\" target=\"_blank\" rel=\"noopener\"  id=\"tweet-quote\">\r\n\t\t\t\t\t\t<FontAwesomeIcon icon={faTwitterSquare} />\r\n\t\t\t\t\t</a>\r\n\t\t\t\t\t<button type=\"submit\" title=\"get new quote\" id=\"new-quote\" onClick={this.loadQuote}>New Quote</button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Quote;","import React from 'react';\nimport './App.css'; \nimport Quote from './components/Quote';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Quote />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}